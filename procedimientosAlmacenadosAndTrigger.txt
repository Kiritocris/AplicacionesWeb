PROCEDIMIENTO ALMACENADO: GastosPorAnioDetalle
Este procedimiento almacenado calcula los gastos totales por mes de un usuario durante un año determinado. Primero, crea una tabla temporal con los meses del año, luego calcula el total de gastos por mes de acuerdo con las facturas y artículos asociados al user_id y al año proporcionados.

sql
Copiar código
DELIMITER //

CREATE PROCEDURE GastosPorAnioDetalle(IN user_id INT, IN anio INT)
BEGIN
    -- Crear una tabla temporal para almacenar los meses del año
    CREATE TEMPORARY TABLE MesesDelAnio (
        mes_num INT PRIMARY KEY,
        mes_nombre VARCHAR(20)
    );

    -- Insertar los nombres de los meses en la tabla temporal
    INSERT INTO MesesDelAnio (mes_num, mes_nombre)
    VALUES
        (1, 'Enero'), (2, 'Febrero'), (3, 'Marzo'),
        (4, 'Abril'), (5, 'Mayo'), (6, 'Junio'),
        (7, 'Julio'), (8, 'Agosto'), (9, 'Septiembre'),
        (10, 'Octubre'), (11, 'Noviembre'), (12, 'Diciembre');

    -- Consultar los gastos por cada mes del año y mostrar el total por mes
    SELECT m.mes_nombre AS mes,
           IFNULL(SUM(a.cantidad * a.precio), 0) AS total_gastos
    FROM MesesDelAnio m
    LEFT JOIN Articulo a ON MONTH(a.fecha_adquisicion) = m.mes_num
    WHERE a.user_id = user_id AND YEAR(a.fecha_adquisicion) = anio
    GROUP BY m.mes_num, m.mes_nombre
    ORDER BY m.mes_num;

    -- Eliminar la tabla temporal después de usarla
    DROP TEMPORARY TABLE MesesDelAnio;
END //

DELIMITER ;

-- TRIGGER( Aumenta en un 15% al precio inicial de cada articulo)
Usar un BEFORE INSERT 
Este enfoque modifica el precio directamente antes de que el registro se inserte en la tabla:

sql
Copiar código
DELIMITER $$

CREATE TRIGGER aumentar_precio_before_insert
BEFORE INSERT ON articulo
FOR EACH ROW
BEGIN
    SET NEW.precio = NEW.precio * 1.15;
END$$

DELIMITER ;

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Datos de prueba en consola:

Aquí tienes 5 ejemplos de inserciones para el user_id = 4 con fechas en los años 2023 y 2024:

1. Artículo insertado en enero de 2023:
sql
Copiar código
INSERT INTO articulo (user_id, nombre, descripcion, categoria, cantidad, precio, fecha_adquisicion)
VALUES (4, 'Smartphone Xiaomi Mi 11', 'Smartphone con procesador Snapdragon 888', 'Electrónica', 3, 850.00, '2023-01-15');
2. Artículo insertado en marzo de 2023:
sql
Copiar código
INSERT INTO articulo (user_id, nombre, descripcion, categoria, cantidad, precio, fecha_adquisicion)
VALUES (4, 'Silla Gaming DXRacer', 'Silla ergonómica para gamer, ajustable', 'Muebles', 2, 450.00, '2023-03-20');
3. Artículo insertado en junio de 2023:
sql
Copiar código
INSERT INTO articulo (user_id, nombre, descripcion, categoria, cantidad, precio, fecha_adquisicion)
VALUES (4, 'Refrigerador Whirlpool', 'Refrigerador 18 pies cúbicos, con eficiencia energética', 'Electrodomésticos', 1, 1200.00, '2023-06-10');
4. Artículo insertado en septiembre de 2024:
sql
Copiar código
INSERT INTO articulo (user_id, nombre, descripcion, categoria, cantidad, precio, fecha_adquisicion)
VALUES (4, 'Cámara Canon EOS 90D', 'Cámara réflex digital de 32.5 MP', 'Electrónica', 1, 1500.00, '2024-09-15');
5. Artículo insertado en diciembre de 2024:
sql
Copiar código
INSERT INTO articulo (user_id, nombre, descripcion, categoria, cantidad, precio, fecha_adquisicion)
VALUES (4, 'Portátil Dell XPS', 'Laptop portátil con procesador i7 y 16GB de RAM', 'Tecnología', 2, 1800.00, '2024-12-05');
Cada inserción incluye una fecha de adquisición diferente en los años 2023 y 2024, y cubre diversas categorías de artículos.